name: Get Secret Token
description: "Log into the target Region, AWS Account Id, Role Name, and Secret Name/Id in order to assume a role to retrieve a secret token from AWS Secrets Manager. The secrets manager is assumed to have a github token stored in it. Key is GITHUB_TOKEN. The token is returned as an output of this composite "
inputs:
  SECRET_ID:
    description: "The secret ID to retrieve"
    required: true
  AWS_REGION:
    description: "The AWS region to use"
    required: true
  INFRA_AWS_ACCOUNT_ID:
    description: "The AWS account ID to use"
    required: true
  ROLE_NAME:
    description: "The IAM role name to assume"
    required: true

outputs:
  token:
    description: "The github secret token"
    value: ${{ steps.get-secret-token.outputs.SECRET_TOKEN }}
  slack_webhook_url:
    description: "The slack webhook url"
    value: ${{ steps.get-secret-webhook.outputs.SLACK_WEBHOOK_URL }}
runs:
  using: "composite"
  steps:
    - name: Set AWS Role ARN
      shell: bash
      run: |
        INFRA_ROLE_ARN="arn:aws:iam::${{inputs.INFRA_AWS_ACCOUNT_ID}}:role/${{ inputs.ROLE_NAME }}"
        echo "INFRA_ROLE_ARN=$INFRA_ROLE_ARN" >> $GITHUB_ENV
    - name: Configure Infra AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ env.INFRA_ROLE_ARN }} #change to reflect your IAM roleâ€™s ARN
        role-session-name: ${{ github.event.repository.name }}_infra_build
        aws-region: ${{ inputs.AWS_REGION }}
    - name: Get secret token
      id: get-secret-token
      shell: bash
      run: |
        # Get the JSON secret and parse it to extract SECRET_TOKEN
        SECRET_TOKEN=$(aws secretsmanager get-secret-value \
          --secret-id ${{ inputs.SECRET_ID }} \
          --query 'SecretString' \
          --output text | jq -r '.GITHUB_TOKEN')

        # Mask the token
        echo "::add-mask::$SECRET_TOKEN"

        # Set as environment variable
        echo "SECRET_TOKEN=$SECRET_TOKEN" >> $GITHUB_ENV

        # Set as output
        echo "::set-output name=SECRET_TOKEN::$SECRET_TOKEN"
    - name: Get secret webhook
      id: get-secret-webhook
      shell: bash
      run: |
        # Get the JSON secret and parse it to extract SLACK_WEBHOOK_URL
        SLACK_WEBHOOK_URL=$(aws secretsmanager get-secret-value \
          --secret-id ${{ inputs.SECRET_ID }} \
          --query 'SecretString' \
          --output text | jq -r '.SLACK_WEBHOOK_URL')

        # Mask the token
        echo "::add-mask::$SLACK_WEBHOOK_URL"

        # Set as environment variable
        echo "SLACK_WEBHOOK_URL=$SLACK_WEBHOOK_URL" >> $GITHUB_ENV

        # Set as output
        echo "::set-output name=SLACK_WEBHOOK_URL::$SLACK_WEBHOOK_URL"
